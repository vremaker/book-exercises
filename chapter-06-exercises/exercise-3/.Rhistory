# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(10)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
return num + 3;
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
return(num + 3);
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(10)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
print(num + 3);
return(num + 3);
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(10)
imperial_to_metric <- function(feet, in) {
res <- (feet *.305) + (in * 2.45);
return(res);
}
imperial_to_metric <- function(feet, in) {
res <- ((feet *.305) + (in * 2.45));
return(res);
}
imperial_to_metric <- function(feet, in) {
res <- (feet *.305);
res <- res + in * 2.54;
return(res);
}
imperial_to_metric <- function(feet, in) {
res <- feet * .305;
res <- res + (in * 2.54);
return(res);
}
imperial_to_metric <- function(feet, in) {
res <- feet * .305;
res <- res + (in * 2.54);
return(res);
}
imperial_to_metric <- function(feet, inc) {
res <- feet * .305;
res <- res + (inc * 2.54);
return(res);
}
height_in_meters <- imperial_to_metric(5,8);
imperial_to_metric <- function(feet, inc) {
res <- (feet * .305) + (inc * 2.54);
return(res);
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,8);
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,8);
imperial_to_metric <- function(feet, inc) {
res <- (feet * .305) + ((inc * 2.54)/100 );
return(res);
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,8);
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Valerie", "Bob", "Karen");
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <-c(10:49)
print(x_range);
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <-seq(-5, 10, .1)
print(x_range);
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <-sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(X_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Use the `length()` function to get the number of elements in `n`
length <- length(n)
# Add 1 to each element in `n` and print the result
n <- n + 1;
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(10::1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- 10::1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <-  c(10::1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <-  c(10:1)
# Subtract `m` FROM `n`. Note the recycling!
bob <- m - n
# Subtract `m` FROM `n`. Note the recycling!
bob <- c(m - n)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(21:30)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(21:30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <-c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11];
some_numbers <- all_numbers(11,20)
some_numbers <- all_numbers(11:20)
some_numbers <- all_numbers[11:20]
some_numbers <- all_numbers[2:11]
source('~/Desktop/info201/book-exercises/chapter-07-exercises/exercise-2/exercise.R', echo=TRUE)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_number <-c(8,6,7,5,3,0,9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_number(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_number(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_number[1:3]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(2, 4.. 100)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(2, 4. 100)
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- c(phone_number <= 5)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(2:4:100)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(2:100)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
even<- c(2:100)
# Create a vector `even` that holds the even numbers from 1 to 100
even<- c(2:100)
# Create a vector `even` that holds the even numbers from 1 to 100
even<- c(0 + 2:100)
(2,4,6,8)
